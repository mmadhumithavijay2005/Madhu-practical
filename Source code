import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Sample dataset
data = {
    'weather': ['sunny', 'rainy', 'cloudy', 'sunny', 'rainy', 'cloudy', 'sunny', 'rainy', 'cloudy'],
    'road_conditions': ['good', 'bad', 'good', 'bad', 'good', 'bad', 'good', 'bad', 'good'],
    'traffic_volume': [100, 200, 150, 120, 250, 180, 220, 280, 300],
    'speed_limit': [60, 70, 65, 60, 70, 65, 60, 70, 65],
    'accident': [0, 1, 0, 1, 0, 1, 0, 1, 0]  # 1 = accident, 0 = no accident
}

df = pd.DataFrame(data)

# Convert categorical variables to numerical
df['weather'] = df['weather'].map({'sunny': 0, 'rainy': 1, 'cloudy': 2})
df['road_conditions'] = df['road_conditions'].map({'good': 0, 'bad': 1})

# Split data into features (X) and target (y)
X = df[['weather', 'road_conditions', 'traffic_volume', 'speed_limit']]
y = df['accident']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Random Forest Classifier Model
model = RandomForestClassifier(n_estimators=100)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluate model performance
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Use the model to predict accident likelihood for new data
new_data = pd.DataFrame({'weather': [1], 'road_conditions': [1], 'traffic_volume': [250], 'speed_limit': [70]})
prediction = model.predict_proba(new_data)
print(f"Accident Likelihood: {prediction[0][1]:.2f}")

# Visualize the data
sns.scatterplot(x='traffic_volume', y='speed_limit', hue='accident', data=df)
plt.title("Traffic Volume vs Speed Limit")
plt.show()
